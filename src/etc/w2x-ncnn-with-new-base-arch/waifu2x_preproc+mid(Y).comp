
#version 450


#extension GL_EXT_shader_16bit_storage: require




layout (constant_id = 0) const int bgr = 0;


layout (binding = 0) readonly buffer bottom_blob { float16_t bottom_blob_data[]; };

layout (binding = 1) writeonly buffer top_blob { float16_t top_blob_data[]; };
layout (binding = 2) writeonly buffer alpha_blob { float16_t alpha_blob_data[]; };

layout (push_constant) uniform parameter
{
    int w;
    int h;
    int cstep;

    int outw;
    int outh;
    int outcstep;

    int pad_top;
    int pad_left;

    int crop_x;
    int crop_y;

    int channels;

    int alphaw;
    int alphah;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.outw || gy >= p.outh || gz >= p.channels)
        return;

    int x = gx + p.crop_x - p.pad_left;
    int y = gy + p.crop_y - p.pad_top;

    x = clamp(x, 0, p.w - 1);
    y = clamp(y, 0, p.h - 1);


    int v_offset = gz * p.cstep + y * p.w + x;

   


    if (gz == 3)
    {
        gx -= p.pad_left;
        gy -= p.pad_top;

        if (gx >= 0 && gx < p.alphaw && gy >= 0 && gy < p.alphah)
        {
            alpha_blob_data[gy * p.alphaw + gx] =  bottom_blob_data[v_offset];
        }
    }
    else
    {
        

        top_blob_data[gz * p.outcstep + gy * p.outw + gx] = bottom_blob_data[v_offset];
    }
}
