
#version 450


#extension GL_EXT_shader_16bit_storage: require



layout (constant_id = 0) const int bgr = 0;

layout (binding = 0) readonly buffer bottom_blob { float16_t bottom_blob_data[]; };
layout (binding = 1) readonly buffer alpha_blob { float16_t alpha_blob_data[]; };

layout (binding = 2) writeonly buffer top_blob { uint16_t top_blob_data[]; };


layout (push_constant) uniform parameter
{
    int w;
    int h;
    int cstep;

    int outw;
    int outh;
    int outcstep;

    int offset_x;
    int gx_max;
    
    int crop_x;
    int crop_y;

    int channels;

    int alphaw;
    int alphah;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.gx_max || gy >= p.outh || gz >= p.channels)
        return;

    

    int v_offset = gy * p.outw + gx + p.offset_x;


    if (gz == 3)
    {
    uint vixa = uint(float(alpha_blob_data[gy * p.alphaw + gx])*65535.0f);
    
    #ifndef I16LE
    vixa=(vixa>>8)|(vixa<<8);
    #endif
    top_blob_data[v_offset * p.channels + gz] = uint16_t(vixa);
    }
     else
    {
    uint vixa = uint(clamp(float(bottom_blob_data[gz * p.cstep + (gy + p.crop_y) * p.w + gx + p.crop_x])*65535.0f,0.0f,65535.0f));
   #ifndef I16LE
   vixa=(vixa>>8)|(vixa<<8);
   #endif
    top_blob_data[v_offset * p.channels + gz] = uint16_t(vixa);
    }

}
