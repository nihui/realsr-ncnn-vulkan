
#version 450


#extension GL_EXT_shader_16bit_storage: require
#define sfp float16_t




layout (constant_id = 0) const int bgr = 0;

layout (binding = 0) readonly buffer bottom_blob0 { float16_t bottom_blob0_data[]; };
layout (binding = 1) readonly buffer bottom_blob1 { float16_t bottom_blob1_data[]; };
layout (binding = 2) readonly buffer bottom_blob2 { float16_t bottom_blob2_data[]; };
layout (binding = 3) readonly buffer bottom_blob3 { float16_t bottom_blob3_data[]; };
layout (binding = 4) readonly buffer bottom_blob4 { float16_t bottom_blob4_data[]; };
layout (binding = 5) readonly buffer bottom_blob5 { float16_t bottom_blob5_data[]; };
layout (binding = 6) readonly buffer bottom_blob6 { float16_t bottom_blob6_data[]; };
layout (binding = 7) readonly buffer bottom_blob7 { float16_t bottom_blob7_data[]; };
layout (binding = 8) readonly buffer alpha_blob { float16_t alpha_blob_data[]; };

layout (binding = 9) writeonly buffer top_blob { uint16_t top_blob_data[]; };


layout (push_constant) uniform parameter
{
    int w;
    int h;
    int cstep;

    int outw;
    int outh;
    int outcstep;

    int offset_x;
    int gx_max;
    
    int crop_x;
    int crop_y;

    int channels;

    int alphaw;
    int alphah;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.gx_max || gy >= p.outh || gz >= p.channels)
        return;


     int v_offset = gy * p.outw + gx + p.offset_x;

   

    if (gz == 3)
    {
    uint vixa = uint(float(alpha_blob_data[gy * p.alphaw + gx])*65535.0f);
    
    #ifndef I16LE
    vixa=(vixa>>8)|(vixa<<8);
    #endif
    
     top_blob_data[v_offset * p.channels + gz] = uint16_t(vixa);
       
    }
    else
    {
        int gzi = gz * p.cstep;
        
        int sy = gy + p.crop_y;
        int sx = gx + p.crop_x;

        float v0 = float(bottom_blob0_data[gzi + sy * p.w + sx]);
        float v1 = float(bottom_blob1_data[gzi + sy * p.w + (p.w - 1 - sx)]);
        float v2 = float(bottom_blob2_data[gzi + (p.h - 1 - sy) * p.w + (p.w - 1 - sx)]);
        float v3 = float(bottom_blob3_data[gzi + (p.h - 1 - sy) * p.w + sx]);
        float v4 = float(bottom_blob4_data[gzi + sx * p.h + sy]);
        float v5 = float(bottom_blob5_data[gzi + sx * p.h + (p.h - 1 - sy)]);
        float v6 = float(bottom_blob6_data[gzi + (p.w - 1 - sx) * p.h + (p.h - 1 - sy)]);
        float v7 = float(bottom_blob7_data[gzi + (p.w - 1 - sx) * p.h + sy]);

        float v = (v0 + v1 + v2 + v3 + v4 + v5 + v6 + v7) * 8191.875f;

	uint vixa = uint(clamp(v,0.0f,65535.0f));
	
	 #ifndef I16LE
	vixa=(vixa>>8)|(vixa<<8);
	#endif
	
         top_blob_data[v_offset * p.channels + gz] = uint16_t(vixa);
    }

 




   

}
